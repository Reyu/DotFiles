# %p      Expands to PGPPASSFD=0 when a pass phrase is needed, to an empty
#         string otherwise. Note: This may be used with a %? construct.
# %f      Expands to the name of a file containing a message.
# %s      Expands to the name of a file containing the signature part
#                    of a multipart/signed attachment when verifying it.
# %a      The value of $pgp_sign_as.
# %r      One or more key IDs.

set pgp_sign_as=0x79141B15
set pgp_autoinline=yes
set crypt_autoencrypt=no
set crypt_autosign=yes
set pgp_timeout=14400
set pgp_entry_format="%4n %t%f %[%y/%m/%d] %rl/0x%k %-4a %2c %u"
set pgp_sort_keys=trust
set pgp_good_sign="`gettext -d gnupg -s 'Good signature from "' | tr -d '='`"
set pgp_autosign=yes
set pgp_use_gpg_agent=yes

# source 'gpg --list-keys | perl -e "while(<>){/(\\b|[<(])([^ \\t]+@[^ \\t]+\.[^ \t]+)(\\b|[>)])/ and $a{$2}=1;}print map qq/send-hook \"~C $_\" set pgp_autoencrypt\n/, keys %a;"|'
set pgp_decode_command="/usr/bin/gpg %?p?--passphrase-fd 0? --no-verbose --batch --output - %f"
set pgp_verify_command="/usr/bin/gpg --no-verbose --batch --output - --verify %s %f"
set pgp_decrypt_command="/usr/bin/gpg --passphrase-fd 0 --no-verbose --batch --output - %f"
set pgp_sign_command="/usr/bin/gpg --no-verbose --batch --output - --passphrase-fd 0 --armor --detach-sign --textmode %?a?-u %a? %f"
set pgp_clearsign_command="/usr/bin/gpg --no-verbose --batch --output - --passphrase-fd 0 --armor --textmode --clearsign %?a?-u %a? %f"
set pgp_encrypt_only_command="pgpewrap gpg -v --batch --output - --encrypt --textmode --armor --always-trust -- -r %r -- %f"
set pgp_encrypt_sign_command="pgpewrap gpg --passphrase-fd 0 -v --batch --output - --encrypt --sign %?a?-u %a? --armor --always-trust -- -r %r -- %f"
set pgp_import_command="/usr/bin/gpg --no-verbose --import -v %f"
set pgp_export_command="/usr/bin/gpg --no-verbose --export --armor %r"
set pgp_verify_key_command="/usr/bin/gpg --no-verbose --batch --fingerprint --check-sigs %r"
set pgp_list_pubring_command="/usr/bin/gpg --no-verbose --batch --with-colons --list-keys %r"
set pgp_list_secring_command="/usr/bin/gpg --no-verbose --batch --with-colons --list-secret-keys %r"
set pgp_getkeys_command="/usr/bin/gpg --recv-keys %r >/dev/null 2>&1"
