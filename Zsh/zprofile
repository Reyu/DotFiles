#
# Defines environment variables.
#
# Authors:
#   Tim Millican <tim.millican@linux.com>
#

# Paths {{{
typeset -gU cdpath fpath mailpath path

# Set the the list of directories that cd searches.
cdpath=(
   $HOME
   $HOME/Projects
   $cdpath
)
# Remove non-existent directories
cdpath=($^cdpath(N-/))

# Set the list of directories that Zsh searches for programs.
path=(
  ${HOME}/.local/bin
  ${HOME}/bin
  ${HOME}/.yarn/bin
  ${HOME}/.go/bin
  ${HOME}/.npm-global/bin
  ${HOME}/.gem/ruby/2.2.0/bin
  /usr/local/{bin,sbin}
  /usr/{bin,sbin}
  /{bin,sbin}
  $path
  /usr/share/surfraw
)
# Remove non-existent directories
path=($^path(N-/))

# Python VirtualEnv Wrapper
export VIRTUAL_ENV_DISABLE_PROMPT=1
export WORKON_HOME=~/Projects/.python_virtual_environments
# }}}
# Editors {{{
if (( $+commands[nvim] )); then
    export VISUAL=${commands[nvim]}
elif (( $+commands[vim] )); then
    export VISUAL=${commands[vim]}
elif (( $+commands[emacsclient] )); then
    export VISUAL="${commands[emacsclient]} -c"
    export ALTERNATE_EDITOR=${commands[emacs]}
elif (( $+commands[emacs] )); then
    export VISUAL="${commands[emacs]} -nw"
fi
export EDITOR=$VISUAL
# }}}
# Make sure that SSH and GPG agents are accessible {{{
if (( $+commands[keychain] )); then
    local SSH_KEYS=$(print ${HOME}/.ssh/*(*:tN))
    # local GPG_KEYS=$(gpg -K --with-colons|awk -F':' '$1 == "fpr" {fpr = $10}; $1 == "uid" {printf "%s ", substr(fpr,33)}')
    eval `keychain -q --agents gpg,ssh --eval ${=SSH_KEYS}`
fi
# }}}
# EC2 Tools {{{
if [[ -f $HOME/.aws_keys ]]; then
    export AWS_ACCESS_KEY=$(cat $HOME/.aws_keys|head -n1)
    export AWS_SECRET_KEY=$(cat $HOME/.aws_keys|tail -n1)
fi
if [[ -d $HOME/.local/ec2-tools ]];then
    export EC2_HOME=$HOME/.local/ec2-tools
    export JAVA_HOME=$(print -l /usr/lib/jvm/java-*-openjdk-*/jre|sort|tail -n1)
    export PATH=$PATH:$EC2_HOME/bin
fi
# }}}
# Extra {{{
export GOPATH="${HOME}/.go"
export NNTPSERVER="news.giganews.commands"

# Attempt to `cd` to project dir, if possible, based on name of current session
if [[ -n $TMUX ]]
then
    export TMUX_SESSION=$(tmux list-sessions -F '#{session_attached} #{session_name}'|awk '/^1/{print $2}')
    cd ${HOME}/Projects/${TMUX_SESSION} 2>/dev/null || true
fi

if [[ -x ${PWD}/.new-shell ]]
then
    # If file exists, and is marked executable
    ${PWD}/.new-shell
elif (( $+commands[todoist] ))
then
    if todoist projects | cut -d' ' -f 2 | grep -q ${TMUX_SESSION}
    then
        todoist --color --indent list | grep "#${TMUX_SESSION}"
    elif [[ -n ${TODO_DEFAULT_PROJECT} ]]
    then
        todoist --color --indent list | grep "#${TODO_DEFAULT_PROJECT}"
    else
        todoist --color --indent list --filter 'today|overdue'
    fi
elif [[ -z $SSH_CONNECTION && $USER != 'root' && $SHLVL -le 2 && -z $NO_FORTUNE ]]; then
    # Give a Fortune!
    if (( $+commands[cowsay] ))
    then fortune | foxsay
    else fortune
    fi
fi
# }}}
# Read local configuration {{{
if [[ -f ${ZDOTDIR:-$HOME}/.zprofile.local ]]; then
    source ${ZDOTDIR:-$HOME}/.zprofile.local
fi
# }}}

# vim: fdm=marker syntax=zsh
