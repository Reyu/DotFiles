" {{{ General
" Sets how many lines of history VIM has to remember
set history=700

" Enable filetype plugins
filetype plugin on
filetype indent on

" Enable syntax highlighting
syntax enable

" Turn on Mode Lines
set modeline
set modelines=3

" Turn on (Relative)Line numbers
set number
set relativenumber

" Allow virtual edit in block mode
set virtualedit=block

" Set terminal title
set title titlestring=NeoVim\ (%F)

" Configure statusline
set statusline= "Clear statusline, when reloading
set statusline+=[%n]\  "Show buffer number
set statusline+=%(%{fugitive#statusline()}\ %) "Show Git branch
set statusline+=%(%{tagbar#currenttag('[%s]','')}\ %) "Show current ctag
set statusline+=%.60f "Show file name/relative path
set statusline+=%(\ [%M%R%H%W]%) "Show Modified flag, Readonly flag, Preview flag, and Help buffer flag
set statusline+=%= "Right ALIGN rest of line
set statusline+=%{\"\".(&fenc==\"\"?&enc:&fenc).((exists(\"+bomb\")\ &&\ &bomb)?\",B\":\"\").\"\ \|\ \"} "Show encoding/bomb
set statusline+=%{&ff}\ \|\ "Show fileformat (line ending)
set statusline+=%Y\ \|\  "Show file type
set statusline+=%02B/%03b\ \|\ "Show hex byte of char under cursor
set statusline+=%l:%c%V\  "Show position/ruler data
set statusline+=%#ErrorMsg#%{neomake#statusline#QflistStatus('qf:\ ')}%* "Show clist counts
set statusline+=%P

" Try to run Neomake an save
autocmd BufWritePost * Neomake

" General }}}
" {{{ Files, backups and undo
" Keep backups in cache folder, so as not to clutter filesystem.
set backup
set backupdir=~/.cache/vim/backup,~/tmp,.,~/
set directory=~/.cache/vim/other,~/tmp,.,/var/tmp,/tmp
set undodir=~/.cache/vim/undo
set undofile
" Don't need backups for tmp files (usually sudo -e)
autocmd BufRead,BufEnter /var/tmp/* set nobackup noundofile nowritebackup
" Files, backups and undo }}}
" {{{ Plugins
call plug#begin('~/.config/NeoVim/plugged') " {{{
Plug 'altercation/vim-colors-solarized'
Plug 'benekastah/neomake'
Plug 'godlygeek/tabular', { 'on' : 'Tabularize' }
Plug 'Lokaltog/vim-easymotion'
Plug 'neovimhaskell/haskell-vim', { 'for' : 'haskell' }
Plug 'majutsushi/tagbar'
Plug 'pbrisbin/vim-syntax-shakespeare', { 'for' : ['hamlet','julius','casius','lucius'] }
Plug 'python.vim', { 'for' : 'python' }
Plug 'python_fold', { 'for' : 'python' }
Plug 'rodjek/vim-puppet', { 'for': 'puppet' }
Plug 'tommcdo/vim-exchange'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-markdown', { 'for' : 'markdown' }
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'Twinside/vim-haskellConceal', { 'for' : 'haskell' }
Plug 'vim-utils/vim-man'
call plug#end() " }}}
" Plugin Configuration {{{
" Plugin 'altercation/vim-colors-solarized' {{{
set background=dark
colorscheme solarized
" }}}
" Plugin 'Lokaltog/vim-easymotion' {{{
let g:EasyMotion_do_mapping = 0 " Disable default mappings
let g:EasyMotion_keys = 'gpbkcwjrvqlzdihutenosa'

" Bi-directional find motion
" Jump to anywhere you want with minimal keystrokes, with just one key binding.
" `s{char}{label}`
" nmap s <Plug>(easymotion-s)
" or
" `s{char}{char}{label}`
" Need one more keystroke, but on average, it may be more comfortable.
nmap s <Plug>(easymotion-s2)

" Turn on case sensitive feature
let g:EasyMotion_smartcase = 1

" JK motions: Line motions
map ,j <Plug>(easymotion-j)
map ,k <Plug>(easymotion-k)

" Easy Motion }}}
" Plugin Configuration }}}
" Plugins }}}
" vim: fdm=marker
